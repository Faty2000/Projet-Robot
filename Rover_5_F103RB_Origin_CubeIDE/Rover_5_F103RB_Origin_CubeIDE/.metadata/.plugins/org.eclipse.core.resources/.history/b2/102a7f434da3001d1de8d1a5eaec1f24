/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"
#include "stdlib.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <time.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
#define AVANCE 	GPIO_PIN_SET
#define RECULE  GPIO_PIN_RESET
#define POURCENT 640
#define Seuil_Dist_4 1600 // corespond à 10 cm.
#define Seuil_Dist_3 1600
#define Seuil_Dist_1 1600
#define Seuil_Dist_2 1600
#define V1 38
#define V2 56
#define V3 76
#define Vmax 95
#define T_2_S 1000 //( pwm période = 2 ms ) sonar
#define T_200_MS 100
#define T_2000_MS 1000
#define CKp_D 100  //80 Robot1
#define CKp_G 100  //80 Robot1
#define CKi_D 80  //50 Robot1
#define CKi_G 80  //50 Robot1
#define CKd_D 0
#define CKd_G 0
#define DELTA 0x50
//added define
#define T_50_MS 25 // autopilotage cycle
#define Servo_Z 4000 //4400 angle 180
#define Servo_Y 800 //880 angle 90
#define Servo_X 2200 //2500 angle zero

#define T_WAIT_ADD 200 //wait for address
#define Top_50cm 867//877 // 19 pulses 1tour
#define Top_90degL 420 // on peut faire des ajustements sur ces trois valeur pour régler la direction du mvt robot
#define Top_90degR 390
#define ConvCst 0.176 //0.176
#define RegX 200
#define BrdHead 0xFFFF //brodcasthead
#define DemMsg 0xEEDD  // demande addresse
//add
#define Add16 0xCCCC  //to change for each robot
#define sonar50cm 5100//5028

enum CMDE {
	START, STOP,
	AVANT, ARRIERE,
	DROITE, GAUCHE,
	Cmd_PARK, Cmd_Att_PARK
};
volatile enum CMDE CMDE;
enum MODE {
	SLEEP, ACTIF, Park, Att_Park
};
//added enum
//enum SELECT_MUR {mur_a,mur_g,mur_d};
//volatile enum SELECT_MUR Select_Mur ;//= mur_d;

volatile enum MODE Mode;
volatile unsigned char New_CMDE = 0;
volatile uint16_t Dist_ACS_1, Dist_ACS_2, Dist_ACS_3, Dist_ACS_4;
volatile unsigned int Time = 0;
volatile unsigned int Tech = 0;

//added time counter
volatile unsigned int T_AP = 0;
volatile unsigned int T_servo = 0;
volatile unsigned int T_phase = 0;
volatile unsigned int T_rnd =0;
volatile unsigned int ServoSel=0;
volatile unsigned int calibration=0;
uint16_t adc_buffer[10]; //[8]
uint16_t Buff_Dist[8];
uint8_t BLUE_RX; //bluetooth reception
//added1 variables
uint16_t Xbee_RX[4];
uint16_t Xbee_TX[4];
uint16_t header;
//uint8_t Ack_TX[4]={'R','E','A','D'};
//uint8_t Brd_head[2] = {'F','F'};
//uint16_t Brd_head = 0xFFFF;

uint16_t Add_dest;
uint16_t sonarDist =0 ;
uint16_t DistX =0;//1883;
uint16_t DistY =0;//4277;
uint16_t DistZ =0;//4500;
uint16_t sonarWidth =0;

char is_turned = 0;
int16_t DistD_base=0,DistG_base =0;
int16_t currentTopR=0;
int16_t currentTopL=0;
volatile char received_Dem =0;
volatile char received_Coord =0;
volatile char received_Add=0;
volatile char is_first=1;
volatile char received_other=0;
int cpt_servo = 0;

uint16_t _DirG, _DirD, CVitG, CVitD, DirD, DirG;
uint16_t _CVitD = 0;
uint16_t _CVitG = 0;
uint16_t VitD, VitG;
int16_t DistD, DistG;
int16_t DistD_old = 0;
int16_t DistG_old = 0;
int Cmde_VitD = 0;
int Cmde_VitG = 0;
unsigned long Dist_parcours = 0;
volatile uint32_t Dist_Obst;
uint32_t Dist_Obst_;
uint32_t Dist_Obst_cm;
uint32_t Dist;
uint8_t UNE_FOIS = 1;
uint32_t OV = 0;
int t_wait=0;
unsigned int T_WAIT;
uint16_t RegServoX=0,RegServoY=0,RegServoZ=0;
//srand(T_rnd);

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
void Gestion_Commandes(void);
void regulateur(void);
void controle(void);
void Calcul_Vit(void);
void ACS(void);
//added funct
void Pilotage_Auto(void); //park_assist
void LD2(bool); //test d'envoi
void testServo(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
  /* USER CODE BEGIN Init */
  Dist_Obst = 0;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_USART3_UART_Init();
  MX_TIM1_Init();
  MX_USART1_UART_Init();
  /* Initialize interrupts */
  MX_NVIC_Init();
  /* USER CODE BEGIN 2 */
  	  	HAL_SuspendTick(); // suppresion des Tick interrupt pour le mode sleep.

    	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);  // Start PWM motor
    	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
    	CMDE = STOP;
    	New_CMDE = 1;
    	HAL_TIM_Base_Start_IT(&htim2);  // Start IT sur font montant PWM
    	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); //encodeur
    	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encodeur
    	HAL_UART_Receive_IT(&huart3, &BLUE_RX, 1);

    	//added2
    	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);//Capture frt desc
    	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);//PWM
    	HAL_UART_Receive_IT(&huart1, Xbee_RX,8); // 8bytes, Xbee sur uart1
    	__HAL_TIM_SET_COMPARE (&htim1,TIM_CHANNEL_4,Servo_X); //initialement à la position zero
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Gestion_Commandes();
	  controle();
	  Pilotage_Auto();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USART3_IRQn);
}

/* USER CODE BEGIN 4 */
void Gestion_Commandes(void) {
	enum ETAT { 
		VEILLE, ARRET,
		AV1, AV2, AV3, RV1, RV2, RV3,
		DV1, DV2, DV3, GV1, GV2, GV3,
		PARK, Att_PARK
	};
	static enum ETAT Etat = VEILLE;

	if (New_CMDE) {
			New_CMDE = 0;
		switch (CMDE) {
			case STOP: { _CVitD = _CVitG = 0;
				// Mise en sommeil: STOP mode , réveil via IT BP1
				Etat = VEILLE; Mode = SLEEP;
				break;
			}
			case START: {
				// réveil sytème grace à l'IT BP1
				Etat = ARRET; Mode = SLEEP;
				break;
			}
			case AVANT: {
				switch (Etat) {
					case VEILLE: { 
						Etat = VEILLE; Mode = SLEEP;
						break;
					}
					case ARRET: {
						_DirG = AVANCE; _DirD = AVANCE; _CVitG = V1; _CVitD = V1; Etat = AV1; Mode = ACTIF;
						break;
					}
					case AV1: {
						_DirG = AVANCE; _DirD = AVANCE; _CVitG = V2; _CVitD = V2; Etat = AV2; Mode = ACTIF;
						break;
					}
					case AV2: {
						_DirG = AVANCE; _DirD = AVANCE; _CVitG = V3; _CVitD = V3 ; Etat = AV3; Mode = ACTIF;
						break;
					}
					case AV3: {
						_DirG = AVANCE; _DirD = AVANCE; _CVitG = V3; _CVitD = V3 ; Etat = AV3; Mode = ACTIF;
						break;
					}
					case RV1: {
						_DirG = RECULE; _DirD = RECULE; _CVitG = 0; _CVitD = 0; Etat = ARRET; Mode = SLEEP;
						break;
					}
					case RV2: {
						_DirG = RECULE; _DirD = RECULE; _CVitG = V1; _CVitD = V1; Etat = RV1; Mode = ACTIF;
						break;
					}
					case RV3: {
						_DirG = RECULE; _DirD = RECULE; _CVitG = V2; _CVitD = V2; Etat = RV2; Mode = ACTIF;
						break;
					}
					case DV1: {
						_DirG = AVANCE; _DirD = AVANCE; _CVitG = V1; _CVitD = V1; Etat = AV1; Mode = ACTIF;
						break;
					}
					case DV2: {
						_DirG = AVANCE; _DirD = AVANCE; _CVitG = V2; _CVitD = V2; Etat = AV2; Mode = ACTIF;
						break;
					}
					case DV3: {
						_DirG = AVANCE; _DirD = AVANCE; _CVitG = V3; _CVitD = V3; Etat = AV3; Mode = ACTIF;
						break;
					}
					case GV1: {
						_DirG = AVANCE; _DirD = AVANCE; _CVitG = V1; _CVitD = V1; Etat = AV2; Mode = ACTIF;
						break;
					}
					case GV2: {
						_DirG = AVANCE; _DirD = AVANCE; _CVitG = V2; _CVitD = V2; Etat = AV2; Mode = ACTIF;
						break;
					}
					case GV3: {
						_DirG = AVANCE; _DirD = AVANCE; _CVitG = V3; _CVitD = V3; Etat = AV3; Mode = ACTIF;
						break;
					}
					case Att_PARK:{
						_DirG = AVANCE; _DirD = AVANCE; _CVitG = V2; _CVitD = V2; Etat = Att_PARK ; Mode = ACTIF;
						break;
					}
				}
				break;
			}
			case ARRIERE: {
				switch (Etat) {
					case VEILLE: {
						Etat = VEILLE; Mode = SLEEP;
						break;
					}
					case ARRET: {
						_DirG = RECULE; _DirD = RECULE; _CVitG = V1; _CVitD = V1; Etat = RV1; Mode = ACTIF;
						break;
					}
					case AV1: {
						_DirG = AVANCE; _DirD = AVANCE; _CVitG = 0; _CVitD = 0; Etat = ARRET; Mode = SLEEP;
						break;
					}
					case AV2: {
						_DirG = AVANCE; _DirD = AVANCE; _CVitG = V1; _CVitD = V1; Etat = AV1; Mode = ACTIF;
						break;
					}
					case AV3: {
						_DirG = AVANCE; _DirD = AVANCE; _CVitG = V2; _CVitD = V2; Etat = AV2; Mode = ACTIF;
						break;
					}
					case RV1: {
						_DirG = RECULE; _DirD = RECULE; _CVitG = V2; _CVitD = V2; Etat = RV2; Mode = ACTIF;
						break;
					}
					case RV2: {
						_DirG = RECULE; _DirD = RECULE; _CVitG = V3; _CVitD = V3; Etat = RV3; Mode = ACTIF;
						break;
					}
					case RV3: {
						_DirG = RECULE; _DirD = RECULE; _CVitG = V3; _CVitD = V3; Etat = RV3; Mode = ACTIF;
						break;
					}
					case DV1: {
						_DirG = RECULE; _DirD = RECULE; _CVitG = V1; _CVitD = V1; Etat = RV1; Mode = ACTIF;
						break;
					}
					case DV2: {
						_DirG = RECULE; _DirD = RECULE; _CVitG = V2; _CVitD = V2; Etat = RV2; Mode = ACTIF;
						break;
					}
					case DV3: {
						_DirG = RECULE; _DirD = RECULE; _CVitG = V3; _CVitD = V3; Etat = RV3; Mode = ACTIF;
						break;
					}
					case GV1: {
						_DirG = RECULE; _DirD = RECULE; _CVitG = V1; _CVitD = V1; Etat = RV1; Mode = ACTIF;
						break;
					}
					case GV2: {
						_DirG = RECULE; _DirD = RECULE; _CVitG = V2; _CVitD = V2; Etat = RV2; Mode = ACTIF;
						break;
					}
					case GV3: {
						_DirG = RECULE; _DirD = RECULE; _CVitG = V3; _CVitD = V3; Etat = RV3; Mode = ACTIF;
						break;
					}
					case Att_PARK:{
						_DirG = RECULE; _DirD = RECULE; _CVitG = V2; _CVitD = V2; Etat = Att_PARK ; Mode = ACTIF;
						break;
					}
				}
				break;
			}
			case DROITE: {
				switch (Etat) {
					case VEILLE: {
						Etat = VEILLE; Mode = SLEEP;
						break;
					}
					case ARRET: {
						_DirG = AVANCE; _DirD = RECULE; _CVitG = V1; _CVitD = V1; Etat = DV1; Mode = ACTIF;
						break;
					}
					case AV1: {
						_DirG = AVANCE; _DirD = RECULE; _CVitG = V1; _CVitD = V1; Etat = DV1; Mode = ACTIF;
						break;
					}
					case AV2: {
						_DirG = AVANCE; _DirD = RECULE; _CVitG = V2; _CVitD = V2; Etat = DV2; Mode = ACTIF;
						break;
					}
					case AV3: {
						_DirG = AVANCE; _DirD = RECULE; _CVitG = V3; _CVitD = V3; Etat = DV3; Mode = ACTIF;
						break;
					}
					case RV1: {
						_DirG = AVANCE; _DirD = RECULE; _CVitG = V1; _CVitD = V1; Etat = DV1; Mode = ACTIF;
						break;
					}
					case RV2: {
						_DirG = AVANCE; _DirD = RECULE; _CVitG = V2; _CVitD = V2; Etat = DV2; Mode = ACTIF;
						break;
					}
					case RV3: {
						_DirG = AVANCE; _DirD = RECULE; _CVitG = V3; _CVitD = V3; Etat = DV3; Mode = ACTIF;
						break;
					}
					case DV1: {
						_DirG = AVANCE; _DirD = RECULE; _CVitG = V2; _CVitD = V2; Etat = DV2; Mode = ACTIF;
						break;
					}
					case DV2: {
						_DirG = AVANCE; _DirD = RECULE; _CVitG = V3; _CVitD = V3; Etat = DV3; Mode = ACTIF;
						break;
					}
					case DV3: {
						_DirG = AVANCE; _DirD = RECULE; _CVitG = V3; _CVitD = V3; Etat = DV3; Mode = ACTIF;
						break;
					}
					case GV1: {
						_DirG = RECULE; _DirD = RECULE; _CVitG = 0; _CVitD = 0; Etat = ARRET; Mode = SLEEP;
						break;
					}
					case GV2: {
						_DirG = RECULE; _DirD = AVANCE; _CVitG = V1; _CVitD = V1; Etat = GV1; Mode = ACTIF;
						break;
					}
					case GV3: {
						_DirG = RECULE; _DirD = AVANCE; _CVitG = V2; _CVitD = V2; Etat = GV2; Mode = ACTIF;
						break;
					}
					case Att_PARK:{
						_DirG = AVANCE; _DirD = RECULE; _CVitG = V1; _CVitD = V1; Etat = Att_PARK ; Mode = ACTIF;
						break;
					}
				}
				break;
			}
			case GAUCHE: {
				switch (Etat) {
					case VEILLE: {
						Etat = VEILLE; Mode = SLEEP;
						break;
					}
					case ARRET: {
						_DirG = RECULE; _DirD = AVANCE; _CVitG = V1; _CVitD = V1; Etat = GV1; Mode = ACTIF;
						break;
					}
					case AV1: {
						_DirG = RECULE; _DirD = AVANCE; _CVitG = V1; _CVitD = V1; Etat = GV1; Mode = ACTIF;
						break;
					}
					case AV2: {
						_DirG = RECULE; _DirD = AVANCE; _CVitG = V2; _CVitD = V2; Etat = GV2; Mode = ACTIF;
						break;
					}
					case AV3: {
						_DirG = RECULE; _DirD = AVANCE; _CVitG = V3; _CVitD = V3; Etat = GV3; Mode = ACTIF;
						break;
					}
					case RV1: {
						_DirG = RECULE; _DirD = AVANCE; _CVitG = V1; _CVitD = V1; Etat = GV1; Mode = ACTIF;
						break;
					}
					case RV2: {
						_DirG = RECULE; _DirD = AVANCE; _CVitG = V2; _CVitD = V2; Etat = GV2; Mode = ACTIF;
						break;
					}
					case RV3: {
						_DirG = RECULE; _DirD = AVANCE; _CVitG = V3; _CVitD = V3; Etat = GV3; Mode = ACTIF;
						break;
					}
					case DV1: {
						_DirG = RECULE; _DirD = RECULE; _CVitG = 0; _CVitD = 0; Etat = ARRET; Mode = SLEEP;
						break;
					}
					case DV2: {
						_DirG = AVANCE; _DirD = RECULE; _CVitG = V1; _CVitD = V1; Etat = DV1; Mode = ACTIF;
						break;
					}
					case DV3: {
						_DirG = AVANCE; _DirD = RECULE; _CVitG = V2; _CVitD = V2; Etat = DV2; Mode = ACTIF;
						break;
					}
					case GV1: {
						_DirG = RECULE; _DirD = AVANCE; _CVitG = V2; _CVitD = V2; Etat = GV2; Mode = ACTIF;
						break;
					}
					case GV2: {
						_DirG = RECULE; _DirD = AVANCE; _CVitG = V3; _CVitD = V3; Etat = GV3; Mode = ACTIF;
						break;
					}
					case GV3: {
						_DirG = RECULE; _DirD = AVANCE; _CVitG = V3; _CVitD = V3; Etat = GV3; Mode = ACTIF;
						break;
					}
					case Att_PARK:{
						_DirG = RECULE; _DirD = AVANCE; _CVitG = V1; _CVitD = V1; Etat = Att_PARK ; Mode = ACTIF;
						break;
					}
				}
				break;
			}
			//added Gestion
			case Cmd_PARK: {
				switch (Etat) {
					case VEILLE: {
						Etat = VEILLE; Mode = SLEEP; // on doit obligatoirement de faire start avant les commandes park et attente park
						break;
					}
					case ARRET: {
						//Etat= CALC_POS;//ARRET; //Etat = park;
						Etat = PARK; Mode= Park;
						break;
					}
				}
				break;
			}
			case Cmd_Att_PARK: {
				switch (Etat) {
					case VEILLE: {
						Etat = VEILLE;
						Mode = SLEEP;
						break;
					}
					case ARRET: {
						Etat= Att_PARK;//ARRET;
						Mode= Att_Park;
						break;
					}
				}
			}
		}
	}
}
void controle(void) {
	if (Tech >= T_200_MS) {
		Tech = 0;
		ACS();
		Calcul_Vit();
		regulateur();
	}
	currentTopR =  __HAL_TIM_GET_COUNTER(&htim3); // affectation des calculs de l'encodeur à ces deux valeurs
	currentTopL = -(__HAL_TIM_GET_COUNTER(&htim4));
}

void ACS(void) { //anticollision
	enum ETAT {
		ARRET, ACTIF
	};
	static enum ETAT Etat = ARRET;
	static uint16_t Delta1 = 0;
	static uint16_t Delta2 = 0;
	static uint16_t Delta3 = 0;
	static uint16_t Delta4 = 0;

	switch (Etat) {
		case ARRET: {
			if ( Mode == ACTIF || Mode == Park || Mode == Att_Park ) // on a ajouté Park et att_park
				Etat = ACTIF;
			else { // on annule les vitesses du robot
				CVitD = _CVitD;
				CVitG = _CVitG;
				DirD = _DirD;
				DirG = _DirG;
			}
			break;
		}
		case ACTIF: {
			if (Mode == SLEEP)
				Etat = ARRET;
			if ( _DirD == AVANCE && _DirG == AVANCE ) {
				if ((Dist_ACS_1 < Seuil_Dist_1 - Delta1) && (Dist_ACS_2 < Seuil_Dist_2 - Delta2)) {
					CVitD = _CVitD; CVitG = _CVitG; DirD = _DirD; DirG = _DirG;
					Delta1 = Delta2 = 0;
				} 
				else if ((Dist_ACS_1 < Seuil_Dist_1) && (Dist_ACS_2 > Seuil_Dist_2)) {
					CVitD = V1; CVitG = V1; DirG = AVANCE; DirD = RECULE;
					Delta2 = DELTA;
				} 
				else if ((Dist_ACS_1 > Seuil_Dist_1) && (Dist_ACS_2 < Seuil_Dist_2)) {
					CVitD = V1; CVitG = V1; DirD = AVANCE; DirG = RECULE;
					Delta1 = DELTA;
				}  
				else if ((Dist_ACS_1 > Seuil_Dist_1) && (Dist_ACS_2 > Seuil_Dist_2)) {
					CVitD = 0; CVitG = 0; DirD = RECULE; DirG = RECULE;
				}
			}
			else if (_DirD == RECULE && _DirG == RECULE) {
				if ((Dist_ACS_3 < Seuil_Dist_3 - Delta3) && (Dist_ACS_4 < Seuil_Dist_4 - Delta4)) {
					CVitD = _CVitD; CVitG = _CVitG; DirD = _DirD; DirG = _DirG;
					Delta3 = Delta4 = 0;
				} 
				else if ((Dist_ACS_3 > Seuil_Dist_3) && (Dist_ACS_4 < Seuil_Dist_4)) {
					CVitD = V1; CVitG = V1; DirD = AVANCE; DirG = RECULE;
					Delta3 = DELTA;
				} 
				else if ((Dist_ACS_3 < Seuil_Dist_3) && (Dist_ACS_4 > Seuil_Dist_4)) {
					CVitD = V1; CVitG = V1; DirG = AVANCE; DirD = RECULE;
					Delta4 = DELTA;
				} 
				else if ((Dist_ACS_3 > Seuil_Dist_3) && (Dist_ACS_4 > Seuil_Dist_4)) {
					CVitD = 0; CVitG = 0; DirD = RECULE; DirG = RECULE;
				}
			} 
			else {
				CVitD = _CVitD; CVitG = _CVitG; DirD = _DirD; DirG = _DirG;
			}
			break;
		}
	}
}

void Calcul_Vit(void) {
	DistD = __HAL_TIM_GET_COUNTER(&htim3); // déjà dans la fonction de controle
	DistG = __HAL_TIM_GET_COUNTER(&htim4); // même
	VitD = abs(DistD - DistD_old);
	VitG = abs(DistG - DistG_old);
	DistD_old = DistD;
	DistG_old = DistG;
	if (DirD == DirG) {
		Dist_parcours = Dist_parcours + ((VitD + VitG) >> 1);
	}
}

void regulateur(void) {
	enum ETAT {
		ARRET, ACTIF
	};
	static enum ETAT Etat = ARRET;
	uint16_t Kp_D = CKp_D;
	uint16_t Kp_G = CKp_G;
	uint16_t Ki_D = CKi_D;
	uint16_t Ki_G = CKi_G;
	uint16_t Kd_D = CKd_D;
	uint16_t Kd_G = CKd_G;

	static int16_t ErreurD = 0;
	static int16_t ErreurG = 0;
	static int16_t ErreurD_old = 0;
	static int16_t ErreurG_old = 0;
	static int16_t S_erreursD = 0;
	static int16_t S_erreursG = 0;
	static int16_t V_erreurD = 0;
	static int16_t V_erreurG = 0;

	switch (Etat) {
	case ARRET: {
		if (Mode == ACTIF || Mode== Park || Mode== Att_Park)
			Etat = ACTIF;
		else {
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
			HAL_GPIO_WritePin(IR3_out_GPIO_Port, IR3_out_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(IR4_out_GPIO_Port, IR4_out_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(IR1_out_GPIO_Port, IR1_out_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(IR2_out_GPIO_Port, IR2_out_Pin, GPIO_PIN_RESET);

			HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON,
					PWR_SLEEPENTRY_WFI);

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
			Time = 0;
		}
		break;
	}
	case ACTIF: {
		if ((CVitD != 0) && (CVitG != 0))
			Time = 0;
		if ((Mode == SLEEP) && (VitD == 0) && (VitG == 0) && Time > T_2_S)
			Etat = ARRET;
		else {
			ErreurD = CVitD - VitD;
			ErreurG = CVitG - VitG;
			S_erreursD += ErreurD;
			S_erreursG += ErreurG;
			V_erreurD = ErreurD - ErreurD_old;
			V_erreurG = ErreurG - ErreurG_old;
			ErreurD_old = ErreurD;
			ErreurG_old = ErreurG;
			Cmde_VitD = (unsigned int) Kp_D * (int) (ErreurD)
					+ (unsigned int) Ki_D * ((int) S_erreursD)
					+ (unsigned int) Kd_D * (int) V_erreurD;
			Cmde_VitG = (unsigned int) Kp_G * (int) (ErreurG)
					+ (unsigned int) Ki_G * ((int) S_erreursG)
					+ (unsigned int) Kd_G * (int) V_erreurG;

			//Cmde_VitD = _CVitD*640;
			//Cmde_VitG = _CVitG*640;
			//	DirD = _DirD;
			//	DirG= _DirG;
			if (Cmde_VitD < 0)
				Cmde_VitD = 0;
			if (Cmde_VitG < 0)
				Cmde_VitG = 0;
			if (Cmde_VitD > 100 * POURCENT)
				Cmde_VitD = 100 * POURCENT;
			if (Cmde_VitG > 100 * POURCENT)
				Cmde_VitG = 100 * POURCENT;
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (uint16_t ) Cmde_VitG);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, (uint16_t ) Cmde_VitD);
			HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, (GPIO_PinState) DirD);
			HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, (GPIO_PinState) DirG);

		}
		break;
	}
	}
}
void LD2(bool s){// pour être sûr qu'il y a envoie de l'add entre le robot park et le rb att_park
	if(s)
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
	else
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);

}
void Pilotage_Auto(void) {
	enum ETAT { ARRET,
				CALC_POS,
				park,
				att_park
		};
	static enum ETAT Etat = ARRET;
	enum SOUS_ETAT {EnvoyerCoord, AttenteAck,AttenteReply,tourne_servo,get_Dist,calc_xyz,phase1,phase2,phase3,DemandeAdd,EnvoyerAdd,AttDemAdd,AttPos
	};
	static enum SOUS_ETAT Sous_Etat = tourne_servo ; // doit être exécuter une seule fois
	enum SELECT_MUR { mur_a, mur_g, mur_d };
	static enum SELECT_MUR Select_Mur = mur_d;
	static uint8_t phase=0;
	
	if(T_AP>= T_50_MS) // temps d'échantillonage de la fonction pilotage
	{
		T_AP=0;
		switch (Etat) {
			case ARRET: {
				switch (Mode){
					case Park: {
						Etat = CALC_POS; //Etat = park;
						Sous_Etat= tourne_servo;
						//Select_Mur = mur_d;
						break;
					}
					case Att_Park: {
						Etat = att_park;
						Sous_Etat = AttDemAdd; // le robot qui est en attente park attend une demande d'adresse
						//Sous_Etat = phase1;
						break;
					}
				}
				break;
			}
			case CALC_POS: {
				switch (Sous_Etat){
					case tourne_servo:{
						if (T_servo++>=40){//40*50=2s pour mesurer une position x ou y ou z){
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // enable sonar
							T_servo= 0;
							Sous_Etat = get_Dist;
						}
						else {
							switch (Select_Mur){
								case mur_a:{
									HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
									__HAL_TIM_SET_COMPARE (&htim1,TIM_CHANNEL_4,Servo_X+RegServoX); // RegServoX=0
									break;
								}
								case mur_g:{
									HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
									__HAL_TIM_SET_COMPARE (&htim1,TIM_CHANNEL_4,Servo_Z+RegServoZ);// RegServoZ=0
									break;
								}
								case mur_d:{ // en premier temps le sonar tourne vers la droite après avant après gauche
									HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
									__HAL_TIM_SET_COMPARE (&htim1,TIM_CHANNEL_4,Servo_Y+RegServoY);// RegServoY=0
									;
									break;
								}
							}
						}
						break;
					}
					case get_Dist: {
						switch (Select_Mur){
							case mur_a:{
								DistX = sonarWidth;
								Etat= park; Sous_Etat = DemandeAdd;
								break;
							}
							case mur_g:{
								DistZ = sonarWidth;
								Select_Mur = mur_a; Sous_Etat= tourne_servo;
								break;
							}
							case mur_d:{
								DistY = sonarWidth;
								Select_Mur = mur_g; Sous_Etat = tourne_servo;
								break;
							}
						}
						break;
					}
				}
				break;
			}
			case park: {
				switch (Sous_Etat) {
					case DemandeAdd:{ // robot park demande des addresses s'il y a des robots en attpark
						is_first =1;
						uint16_t Dem_TX[4]= {BrdHead,DemMsg,DemMsg,DemMsg};
						HAL_UART_Transmit(&huart1,Dem_TX,8,1000); //1s pour TimeOut au cas où il y a un problème // 8 =4*2
						LD2(true); // Led verte sur la carte
						Sous_Etat= AttenteReply;
						break;
					}
					case AttenteReply:{ // le robot park attend une réponse du robot attpark
						if(received_Add)
						{
							received_Add=0;
							Etat = park; Sous_Etat = EnvoyerCoord;
							LD2(false);
						}
						if(T_phase++>= T_WAIT_ADD){ //200*50=10s
							Etat= ARRET;
							CMDE = START;
							New_CMDE =1;
							//Mode= SLEEP;
						}
						break;
					}
					case EnvoyerCoord: {
						if (t_wait++>= 20){ //1s
							t_wait=0;
							uint16_t Coord_TX[4] = {Add_dest,DistX,DistY,DistZ};
							HAL_UART_Transmit(&huart1,Coord_TX,8,1000);
							Etat= ARRET;
							CMDE = START;
							New_CMDE =1;
							//Mode= SLEEP;
						}

						break;
					}

				break;
				}
			}
			case att_park:
			{
				switch (Sous_Etat) {
					case AttDemAdd:{
						LD2(true);
						if(received_Dem)
						{	
							received_Dem=0;
							T_WAIT = (rand()*T_rnd)%80 +1; // attente un instant
							Sous_Etat= EnvoyerAdd;
						}
						break;
					}
					case EnvoyerAdd:{
						if (t_wait++>= T_WAIT && received_other==0){
							t_wait=0;
							LD2(false);
							uint16_t Add_TX[4]= {BrdHead,Add16,Add16,Add16};
							HAL_UART_Transmit(&huart1,Add_TX,8,1000);
							Sous_Etat= AttenteAck;
						}
						else if(received_other){
							received_other=0; // pour qu'il ne reçoit pas des adresses des autres robot qui ont en attente park
							Sous_Etat = AttDemAdd;
						}
						break;
					}
					case AttenteAck:{ // le rbt en attpark attend les trois positions du robot en park
						if(received_Coord){
							received_Coord=0;
							DistD_base = currentTopR;
							DistG_base = currentTopL;
							Sous_Etat = phase1;
						}
						else if(received_other){
							received_other=0;
							Sous_Etat = AttDemAdd;
						}
						break;
					}
					case phase1:{

						switch (phase){
							case 0:{
								CMDE = AVANT; New_CMDE = 1;
								phase=1;
								break;
							}
							case 1:{
								if(currentTopR-DistD_base >= Top_50cm){
									_CVitG = 0; _CVitD = 0;
									if(T_phase++ >=30){
										DistD_base =currentTopR;
										DistG_base =currentTopL;
										CMDE= GAUCHE; New_CMDE =1;
										phase=2;
										T_phase=0;
									}
								}
								break;
							}
							case 2:{
								if(abs(currentTopR-DistD_base)>=Top_90degL){
									_CVitG = 0; _CVitD = 0;
									if(T_phase++ >=30){
										DistD_base =currentTopR;
										DistG_base =currentTopL;
										HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
										phase=0;
										Sous_Etat= phase2;
										T_phase=0;
									}
								}
								break;
							}	

						}
						break;
					}
					case phase2:{
						switch(phase){
							case 0: {
								if(sonarWidth < DistZ){
									CMDE= ARRIERE; New_CMDE =1;
									phase=1;//6
								}
								else{
									CMDE= AVANT; New_CMDE =1;
									phase=2;//7
								}
								break;
							}
							case 1:{
								if(DistD_base-currentTopR >= (DistZ-sonarWidth)*ConvCst){// - Top_50cm){
									//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
									_CVitG = 0; _CVitD = 0;
									phase=3;
								}
								break;
							}

							case 2:{
								if(currentTopR - DistD_base >= (sonarWidth-DistZ)*ConvCst){ //- Top_50cm){
									_CVitG = 0; _CVitD = 0;
									phase=3;
								}
								break;
							}
							case 3:{
								if(T_phase++ >=40){
									DistD_base=currentTopR;
									DistG_base=currentTopL;
									//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
									CMDE= DROITE; New_CMDE =1;
									phase=4;
									T_phase=0;
								}
								break;
							}
							case 4:{
								if(abs(currentTopL - DistG_base) >= Top_90degR){
									_CVitG = 0; _CVitD = 0;
									if(T_phase++ >=30){
										DistD_base=currentTopR;
										DistG_base=currentTopL;
										HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
										Sous_Etat = phase3;
										phase =0;
										T_phase=0;
									}
								}
								break;
							}	
						}
						break;
					}
					case phase3:{
						switch(phase){
							case 0: {
									CMDE= AVANT; New_CMDE =1;
									phase=1;
								break;
							}
							case 1:{
								if(currentTopR - DistD_base>= (sonarWidth-DistX)*ConvCst-RegX){//500
									//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
									//CMDE= ARRIERE; New_CMDE =1;
									_CVitG = 0;
									_CVitD = 0;
									if(T_phase++ >=30){
										DistD_base=currentTopR;
										DistG_base=currentTopL;
										phase=0;
										Mode = Park;
										Sous_Etat = DemandeAdd;
										Etat = park;
									}
								}
								break;
							}
						}
						break;
					}
				}
				break;
			}

		}
	}
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart->Instance == USART3) {

		switch (BLUE_RX) {
		case 'F': {
			CMDE = AVANT;
			//New_CMDE = 1;
			break;
		}

		case 'B': {
			CMDE = ARRIERE;
			//New_CMDE = 1;
			break;
		}

		case 'L': {
			CMDE = GAUCHE;
			//New_CMDE = 1;
			break;
		}

		case 'R': {
			CMDE = DROITE;
			//New_CMDE = 1;
			break;
		}

		case 'D':{
			// disconnect bluetooth
			break;
		}
		case 'W':{
			// PARK

			//HAL_UART_Transmit(&huart1,Xbee_TX,20,1000);
			CMDE = Cmd_PARK;
			//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
			New_CMDE =1;
			break;
		}
		case 'w':{

			break;
		}
		case 'X':{
			CMDE= Cmd_Att_PARK;
			New_CMDE =1;
			break;
		}
		case 'x':{ 
			
			break;
		}
		case 'U' :{ //back light
			calibration=1;

			if(ServoSel%3==2)
			{
				RegServoY +=40;
				__HAL_TIM_SET_COMPARE (&htim1,TIM_CHANNEL_4,Servo_Y+RegServoY);
			}
			else if(ServoSel%3==1)
			{
				RegServoZ +=40;
				__HAL_TIM_SET_COMPARE (&htim1,TIM_CHANNEL_4,Servo_Z+RegServoZ);
			}
			else if(ServoSel%3==0)
			{
				RegServoX +=40;
				__HAL_TIM_SET_COMPARE (&htim1,TIM_CHANNEL_4,Servo_X+RegServoX);
			}
			break;
		}
		case 'u':{

			break;
		}
		case 'V':{ //horn
			calibration=1;

			if(ServoSel%3==2)
			{
				RegServoY -=40;
				__HAL_TIM_SET_COMPARE (&htim1,TIM_CHANNEL_4,Servo_Y+RegServoY);
			}
			if(ServoSel%3==1)
			{
				RegServoZ -=40;
				__HAL_TIM_SET_COMPARE (&htim1,TIM_CHANNEL_4,Servo_Z+RegServoZ);
			}
			if(ServoSel%3==0)
			{
				RegServoX -=40;
				__HAL_TIM_SET_COMPARE (&htim1,TIM_CHANNEL_4,Servo_X+RegServoX);
			}
			break;
		}
		case 'v': {

			break;
		}
		default:
			//if(calibration==0)
				New_CMDE = 1;
			//else
				//servo++;
		}

		HAL_UART_Receive_IT(&huart3, &BLUE_RX, 1);
	}
	else if (huart->Instance == USART1){
		header = Xbee_RX[0];
		if(header == BrdHead)
		{
			if (Mode == Park && is_first){
				received_Add = 1;
				Add_dest = Xbee_RX[1];
				is_first =0;
			}
			else{
				received_Dem = 1;
			}
		}
		else if(header== Add16)
		{
			DistX = Xbee_RX[1];
			DistY = Xbee_RX[2]-sonar50cm;
			DistZ = Xbee_RX[3]+sonar50cm;
			received_Coord = 1;
		}
		else{
			received_other=1;
			received_Dem=0;
		}
		HAL_UART_Receive_IT(&huart1, Xbee_RX, 8);
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {

	Dist_ACS_3 = adc_buffer[0] - adc_buffer[5];//4
	Dist_ACS_4 = adc_buffer[3] - adc_buffer[8];//7
	Dist_ACS_1 = adc_buffer[1] - adc_buffer[6];//5
	Dist_ACS_2 = adc_buffer[2] - adc_buffer[7];//6
	HAL_ADC_Stop_DMA(hadc);
}

//added3 interrupts//

//Watchdog interrupt
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
	sonarWidth = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // IT pour retourner la valeur de sonarwidth
	//sonarDist = sonarWidth*645/64864;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
	static unsigned char cpt = 0;

	if ( htim->Instance == TIM2) {
		cpt++;
		Time++;
		Tech++;
		T_AP++;
		T_rnd++; // timer a une valeur aléatoire pour différencier les temps de réponse des robots en attpark
		switch (cpt) {
		case 1: {
			HAL_GPIO_WritePin(IR3_out_GPIO_Port, IR3_out_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(IR4_out_GPIO_Port, IR4_out_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(IR1_out_GPIO_Port, IR1_out_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(IR2_out_GPIO_Port, IR2_out_Pin, GPIO_PIN_SET);
			break;
		}
		case 2: {
			HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_buffer, 10);//8
			break;
		}
		case 3: {
			HAL_GPIO_WritePin(IR3_out_GPIO_Port, IR3_out_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(IR4_out_GPIO_Port, IR4_out_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(IR1_out_GPIO_Port, IR1_out_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(IR2_out_GPIO_Port, IR2_out_Pin, GPIO_PIN_RESET);
			break;
		}
		case 4: {
			HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_buffer, 10);//8;
			break;
		}
		default:
			cpt = 0;
		}
	}
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

	static unsigned char TOGGLE = 0;
	if(calibration==0){
		if (TOGGLE){
			//CMDE = STOP;
			CMDE = Cmd_PARK;
		}
		else
			CMDE = START;
		TOGGLE = ~TOGGLE;
		New_CMDE = 1;
	}
	else{
		ServoSel++;
		calibration=0;
		TOGGLE=0;
	}
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
